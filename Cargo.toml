[workspace]
resolver = "2"
members = ["lib", "app", "frontend", "server"]

# need to be applied only to wasm build
[profile.release]
codegen-units = 1
lto = true
opt-level = 'z'

[workspace.dependencies]
lib = { path = "./lib" }
leptos = { version = "0.8.6" }
leptos_meta = { version = "0.8.5" }
leptos_router = { version = "0.8.5" }
leptos_axum = { version = "0.8.5" }

axum = "0.8.4"
cfg-if = "1.0.0"
console_error_panic_hook = "0.1.7"
console_log = "1.0.0"
http = "1.3.1"
log = "0.4.27"
simple_logger = "5.0.0"
thiserror = "2.0.12"
tokio = { version = "1.45.0", features = ["full"] }
tower = { version = "0.5.2", features = ["full"] }
tower-http = { version = "0.6.4", features = ["full"] }
wasm-bindgen = "=0.2.100"

#leptos_i18n = { version = "0.5.10", features = ["hydrate", "nightly", "serde", "axum", "track_locale_files"] }
#leptos-use = "0.15.7"
#leptos-use = {version = "0.16.0-beta", features = ["axum"]}
axum_session = "0.16.0"
axum_session_auth = { version = "0.16.0" }
axum_session_sqlx = { version = "0.5.0" }
aws-config = { version = "1.1.7", features = ["behavior-version-latest"] }
aws-sdk-ec2 = "1.118.1"
serde = { version = "1.0.126", features = ["derive"] }
strum = "0.27.1"
strum_macros = "0.27.1"
serde_json = "1.0.125"
sqlx = { version = "0.8.0", features = ["runtime-tokio-rustls", "postgres", "macros"]}
#sqlx = { version = "0.6.3", features = [
#    "mysql",
#    "runtime-tokio-rustls",
#    "time",
#    "json",
#], optional = true }


sqlx-postgres = "0.8.0"
postgres = "0.19.7"
async-trait = "0.1.79"
anyhow = "1.0.81"
env_logger = "0.11.3"
argon2 = "0.5.3"
gloo-storage = "0.3.0"
gloo-net = { version = "0.6.0", features = ["http"] }
uuid = { version = "1.10.0", features = ["v4", "serde", "js"] }
rust-i18n = "3.1.3"
chrono = "0.4.40"
axum-macros = "0.5.0"
getrandom = { version = "0.3", features = ["wasm_js"] }
reactive_graph = "0.2.0-beta"
#leptos-use = { version = "0.16.0-beta", features = [ "axum", "use_color_mode", "use_debounce_fn", "use_event_listener", "use_interval", "use_intl_number_format", "use_locales", "use_timestamp", "storage"] }

# See https://github.com/leptos-rs/cargo-leptos for documentation of all the parameters.

# A leptos project defines which workspace members
# that are used together frontend (lib) & server (bin)
[[workspace.metadata.leptos]]
# this name is used for the wasm, js and css file names
name = "darkmark"

# the package in the workspace that contains the server binary (binary crate)
bin-package = "server"

# the package in the workspace that contains the frontend wasm binary (library crate)
lib-package = "frontend"

# The site root folder is where cargo-leptos generate all output. WARNING: all content of this folder will be erased on a rebuild. Use it in your server setup.
site-root = "target/site"

# The site-root relative folder where all compiled output (JS, WASM and CSS) is written
# Defaults to pkg
site-pkg-dir = "pkg"

# [Optional] The source CSS file. If it ends with .sass or .scss then it will be compiled by dart-sass into CSS. The CSS is optimized by Lightning CSS before being written to <site-root>/<site-pkg>/app.css
#style-file = "style/main.scss"
tailwind-input-file = "style/tailwind.css"
#LEPTOS_TAILWIND_VERSION = "v4.1.7"
leptos_tailwind_version = "v4.1.7"

# Assets source dir. All files found here will be copied and synchronized to site-root.
# The assets-dir cannot have a sub directory with the same name/path as site-pkg-dir.
#
# Optional. Env: LEPTOS_ASSETS_DIR.
assets-dir = "public"

# The IP and port (ex: 127.0.0.1:3000) where the server serves the content. Use it in your server setup.
site-addr = "127.0.0.1:3000"

# The port to use for automatic reload monitoring
reload-port = 3001

# [Optional] Command to use when running end2end tests. It will run in the end2end dir.
#   [Windows] for non-WSL use "npx.cmd playwright test"
#   This binary name can be checked in Powershell with Get-Command npx
end2end-cmd = "npx playwright test"
end2end-dir = "end2end"

#  The browserlist query used for optimizing the CSS.
browserquery = "defaults"

# Set by cargo-leptos watch when building with that tool. Controls whether autoreload JS will be included in the head
watch = false

# The environment Leptos will run in, usually either "DEV" or "PROD"
env = "DEV"

# The features to use when compiling the bin target
#
# Optional. Can be over-ridden with the command line parameter --bin-features
bin-features = []

# If the --no-default-features flag should be used when compiling the bin target
#
# Optional. Defaults to false.
bin-default-features = false

# The features to use when compiling the lib target
#
# Optional. Can be over-ridden with the command line parameter --lib-features
lib-features = []

# If the --no-default-features flag should be used when compiling the lib target
#
# Optional. Defaults to false.
lib-default-features = false
